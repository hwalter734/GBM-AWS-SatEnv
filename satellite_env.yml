---
Description: This template deploys a VPC, with two public subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  an instance configured to support a Red Hat Satellite installation, and an additional
  instance to deploy a Red Hat Satellite Capsule server. Finally, it deploys a load
  balancer that can be used to provision instances.

Parameters:
  InstanceType:
    Description: EC2 default instance types
    Type: String
    Default: m3.large
    AllowedValues:
      - m3.large
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Default: protokey

  AmiId:
    Type: String
    Default: ami-005b7876121b7244d

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 12.0.0.0/16

  VpcName:
    Description: Please enter the desired VPC name
    Type: String
    Default: example

  RouteTableName:
    Description: Please enter the desired route table name
    Type: String
    Default: rtb_example1

  IgwName:
    Description: Please enter the desired internet gateway name
    Type: String
    Default: igw_example1

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 12.0.1.0/24

  PublicSubnet1Az:
    Description: Please enter the desired availability zone for the Satellite server instance 
    Type: String
    Default: us-east-1a

  PublicSubnet1AzName:
    Description: Please enter the desired name of the availability zone for the Satellite server instance
    Type: String
    Default: subnet-us-east-1-1a

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 12.0.2.0/24

  PublicSubnet2Az:
    Description: Please enter the desired availability zone for the Capsule server instance
    Type: String
    Default: us-east-1b

  PublicSubnet2AzName:
    Description: Please enter the desired name of the availability zone for the Capsule server instance
    Type: String
    Default: subnet-us-east-1-1b

  SatInstanceName:
    Description: Please enter the desired name of the Satellite server instance 
    Type: String
    Default: satinstance

  CapInstanceName:
    Description: Please enter the desired name of the Capsule server instance
    Type: String
    Default: capinstance

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VpcName

  IGW:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Ref IgwName
        - Key: Network
          Value: Public

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId: !Ref PublicSubnet1

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone: !Ref PublicSubnet1Az
      CidrBlock: !Ref PublicSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet1AzName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone: !Ref PublicSubnet2Az
      CidrBlock: !Ref PublicSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet2AzName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref RouteTableName

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref IGW

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  SatelliteSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: sat_group
      GroupDescription: Ports for satellite communication
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 7
          ToPort: 7
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 7
          ToPort: 7
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 67
          ToPort: 67
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 69
          ToPort: 69
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5646
          ToPort: 5646
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5647
          ToPort: 5647
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8140
          ToPort: 8140
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0

  CapsuleSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: capsule_sg
      GroupDescription: Ports for capsule communication
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5647
          ToPort: 5647
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8140
          ToPort: 8140
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 67
          ToPort: 67
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 7
          ToPort: 7
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 7
          ToPort: 7
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 68
          ToPort: 68
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0

  SatVolume:
    Type: AWS::EC2::Volume
    Properties:
      AutoEnableIO: true
      AvailabilityZone: us-east-1a
      Size: 500
      VolumeType: gp2

  CapVolume:
    Type: AWS::EC2::Volume
    Properties:
      AutoEnableIO: true
      AvailabilityZone: us-east-1b
      Size: 500
      VolumeType: gp2

  SatelliteInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m4.2xlarge
      ImageId: !Ref AmiId
      KeyName: !Ref KeyName
      Volumes:
        - Device: "/dev/sdf"
          VolumeId: !Ref SatVolume
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref SatelliteSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          sudo mkfs -t xfs /dev/xvdf
          sudo mkdir /satdata
          sudo mount /dev/xvdf /satdata
          sudo echo "/dev/xvdf  /satdata  xfs   defaults,nofail 0     2" >> /etc/fstab
          mount -a
      Tags:
        - Key: Name
          Value: !Ref SatInstanceName

  CapsuleInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m4.xlarge
      ImageId: !Ref AmiId
      KeyName: !Ref KeyName
      Volumes:
        - Device: "/dev/sdf"
          VolumeId: !Ref CapVolume
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref PublicSubnet2
          GroupSet:
            - !Ref CapsuleSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          sudo mkfs -t xfs /dev/xvdf
          sudo mkdir /satdata
          sudo mount /dev/xvdf /satdata
          sudo echo "/dev/xvdf  /satdata  xfs   defaults,nofail 0     2" >> /etc/fstab
          mount -a
      Tags:
        - Key: Name
          Value: !Ref CapInstanceName

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  IGW:
    Description: Internet gateway for application
    Value: !Ref IGW

  EIP:
    Description: Elastic IP for demo
    Value: !Ref EIP

  NatGW:
    Description: Nat gateway for subnet
    Value: !Ref NatGW

  VPCGatewayAttachment:
    Description: Internet gateway attachment for application
    Value: !Ref VPCGatewayAttachment

  PublicRouteTable:
    Description: Internet gateway attachment for application
    Value: !Ref PublicRouteTable

  DefaultPublicRoute:
    Description: Default public route
    Value: !Ref DefaultPublicRoute

  PublicSubnet1RouteTableAssociation:
    Description: Associate subnet one with route table
    Value: !Ref PublicSubnet1RouteTableAssociation

  PublicSubnet2RouteTableAssociation:
    Description: Associate subnet two with route table
    Value: !Ref PublicSubnet2RouteTableAssociation

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  SatelliteInstance:
    Description: Satellite instance
    Value: !Ref SatelliteInstance

  CapsuleInstance:
    Description: Capsule instance
    Value: !Ref CapsuleInstance
...
